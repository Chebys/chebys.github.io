js实现特有问题

js实现中，jua字符串通过js字符串实现，本质上是utf16码元序列。进行二进制操作时，每个utf16码元看作一个字节。
原生字符串：从源代码中的字面字符串产生的字符串
正规字符串：每个码元均处于[0, 255]的字符串
正规字符串的表现符合标准（但不代表可以正常输出，标准并未规定如何输出）
目前的实现中，非正规字符串一定是原生字符串或由原生字符串产生（通过字符串操作）
Number.encodeXXX、Buffer.read 得到的一定是正规字符串
将非正规字符串传入 Number.decodeXXX、Buffer.write 时，会丢失数据
将原生字符串写入标准输出可以正常输出
将正规字符串写入标准输出时，如果预期每个字符占用一个字节（对应js字符串中的utf16码元），且编码规则与Unicode前256个码位一致，则可以正常输出

考虑使用严格解析模式：
对源代码中的每个非ascii字符进行utf8编码后再转换为js字符串（每个字节对应一个utf16码元），输出时则进行逆过程，此时所有行为均符合标准（均为正规字符串）且能够正常输出。
还是有问题：\u转义


调试模式：
不捕获错误，不将错误写入标准错误，而是由宿主程序处理（如显示在浏览器控制台）
如果不这么做，将无法得知错误的实际产生位置